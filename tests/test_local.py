#!/usr/bin/env python3
"""
üè† –¢–µ—Å—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import logging
import sys
import os
import time
from pathlib import Path
from typing import Dict, Any, List
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class LocalTestRunner:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.start_time = time.time()
        self.passed = 0
        self.failed = 0
    
    def test_result(self, test_name: str, success: bool, message: str = ""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        if success:
            self.passed += 1
            logger.info(f"‚úÖ {test_name}")
        else:
            self.failed += 1
            logger.error(f"‚ùå {test_name}: {message}")
    
    async def test_imports(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            from core.orchestrator import Orchestrator
            from core.pdf_extractor import PDFExtractor
            from core.agents.structure_agent import StructureAgent
            from core.agents.base_agent import BaseAgent
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            from bot.config import config
            
            self.test_result("Core imports", True)
            
        except Exception as e:
            self.test_result("Core imports", False, str(e))

    async def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from bot.config import config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            assert hasattr(config, 'BOT_TOKEN')
            assert hasattr(config, 'LOG_LEVEL')
            assert hasattr(config, 'TEMP_DIR')
            
            self.test_result("Configuration", True)
            
        except Exception as e:
            self.test_result("Configuration", False, str(e))
    
    async def test_file_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        try:
            required_files = [
                "src/app.py",  # –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                "src/api/llm_server.py",  # FastAPI —Å–µ—Ä–≤–µ—Ä
                "src/core/orchestrator.py",
                "src/core/pdf_extractor.py",
                "src/core/agents/base_agent.py",
                "src/core/agents/structure_agent.py",
                "src/core/agents/summary_agent.py",
                "src/bot/config.py",
                "src/bot/keyboards.py",
                "src/bot/handlers.py",
                "config/requirements.txt",
                "docker/Dockerfile",
                "docker/docker-compose.yml"
            ]
            
            missing_files = []
            for file_path in required_files:
                if not Path(file_path).exists():
                    missing_files.append(file_path)
            
            if missing_files:
                self.test_result("File structure", False, f"Missing files: {missing_files}")
            else:
                self.test_result("File structure", True)
                
        except Exception as e:
            self.test_result("File structure", False, str(e))
    
    async def test_dependencies(self):
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            import aiohttp
            import aiogram
            import fastapi
            import uvicorn
            import ollama
            import fitz  # PyMuPDF
            
            self.test_result("Dependencies", True)
            
        except Exception as e:
            self.test_result("Dependencies", False, str(e))
    
    async def test_pdf_extractor_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞"""
        try:
            from core.pdf_extractor import PDFExtractor
            
            extractor = PDFExtractor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ extractor —Å–æ–∑–¥–∞–µ—Ç—Å—è
            assert extractor is not None
            
            self.test_result("PDF extractor basic", True)
            
        except Exception as e:
            self.test_result("PDF extractor basic", False, str(e))
    
    async def test_structure_agent_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            from core.agents.structure_agent import StructureAgent
            
            agent = StructureAgent()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            test_text = """
            Abstract
            This is a test.
            
            Introduction
            This is introduction.
            
            Conclusion
            This is conclusion.
            """
            
            # –ú–æ–∫–∞–µ–º LLM –≤—ã–∑–æ–≤ –µ—Å–ª–∏ Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            with patch('ollama.AsyncClient') as mock_client:
                mock_instance = AsyncMock()
                mock_client.return_value = mock_instance
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç
                mock_instance.generate.return_value = {
                    'response': '{"found_sections": ["Abstract", "Introduction", "Conclusion"], "structure_quality": "good"}'
                }
                
                results = await agent.analyze(test_text, {"title": "Test"})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert isinstance(results, dict)
                assert "found_sections" in results
                
            self.test_result("Structure agent basic", True)
            
        except Exception as e:
            self.test_result("Structure agent basic", False, str(e))
    
    async def test_orchestrator_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            from core.orchestrator import Orchestrator
            from core.agents.structure_agent import StructureAgent
            
            orchestrator = Orchestrator()
            agent = StructureAgent()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
            orchestrator.register_agent("TestAgent", agent)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            assert "TestAgent" in orchestrator.agents
            
            self.test_result("Orchestrator basic", True)
            
        except Exception as e:
            self.test_result("Orchestrator basic", False, str(e))
    
    async def test_bot_handlers_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)"""
        try:
            from bot.handlers import router, LLMServiceClient
            from bot.keyboards import get_main_keyboard
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ router —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert router is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
            client = LLMServiceClient()
            assert client is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_main_keyboard()
            assert keyboard is not None
            
            self.test_result("Bot handlers import", True)
            
        except Exception as e:
            self.test_result("Bot handlers import", False, str(e))
    
    async def test_llm_service_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            from api.llm_server import app
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FastAPI app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert app is not None
            
            self.test_result("FastAPI service import", True)
            
        except Exception as e:
            self.test_result("FastAPI service import", False, str(e))

    async def test_summary_agent_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ú–æ–∫–∞–µ–º ollama –∫–ª–∏–µ–Ω—Ç –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
            with patch('ollama.AsyncClient') as mock_client:
                mock_instance = AsyncMock()
                mock_client.return_value = mock_instance
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç –¥–ª—è chat –º–µ—Ç–æ–¥–∞
                mock_instance.chat.return_value = {
                    'message': {
                        'content': 'This paper presents a new AI method achieving 95% accuracy. The work demonstrates effectiveness in AI analysis applications.'
                    }
                }
                
                from core.agents.summary_agent import SummaryAgent
                agent = SummaryAgent()
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                test_text = """
                Abstract: This paper presents a new method for AI analysis.
                Introduction: AI is important for modern research.
                Results: We achieved 95% accuracy.
                Conclusion: The method is effective.
                """
                
                results = await agent.analyze(test_text, {"title": "Test AI Paper"})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert isinstance(results, dict)
                assert "summary" in results
                
            self.test_result("Summary agent basic", True)
            
        except Exception as e:
            self.test_result("Summary agent basic", False, str(e))

    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        total = self.passed + self.failed
        elapsed = time.time() - self.start_time
        
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*50)
        
        if self.failed == 0:
            print(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´: {self.passed}/{total}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}—Å")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–º–º–∏—Ç—É!")
        else:
            print(f"‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: {self.passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            print(f"üí• –ù–µ –ø—Ä–æ—à–ª–æ: {self.failed} —Ç–µ—Å—Ç–æ–≤")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º")
            
        print("="*50)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üè† –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    logger.info("="*50)
    
    runner = LocalTestRunner()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await runner.test_imports()
    await runner.test_configuration()
    await runner.test_file_structure()
    await runner.test_dependencies()
    await runner.test_pdf_extractor_basic()
    await runner.test_structure_agent_basic()
    await runner.test_orchestrator_basic()
    await runner.test_bot_handlers_import()
    await runner.test_llm_service_import()
    await runner.test_summary_agent_basic()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    runner.print_results()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return 0 if runner.failed == 0 else 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 