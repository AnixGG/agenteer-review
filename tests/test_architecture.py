#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import asyncio
import aiohttp
import logging
import sys
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_fastapi_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä"""
    try:
        timeout = aiohttp.ClientTimeout(total=5)  # 5 —Å–µ–∫—É–Ω–¥ timeout
        async with aiohttp.ClientSession(timeout=timeout) as session:
            # –¢–µ—Å—Ç health check
            async with session.get("http://localhost:8000/health") as response:
                if response.status == 200:
                    health_data = await response.json()
                    logger.info(f"‚úÖ FastAPI Health Check: {health_data}")
                    return True
                else:
                    logger.error(f"‚ùå FastAPI Health Check failed: {response.status}")
                    return False
    except asyncio.TimeoutError:
        logger.warning("‚ö†Ô∏è FastAPI server timeout - server not running")
        return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è FastAPI connection failed: {e}")
        return False

async def test_ollama_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama"""
    try:
        timeout = aiohttp.ClientTimeout(total=5)  # 5 —Å–µ–∫—É–Ω–¥ timeout
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get("http://localhost:11434/api/version") as response:
                if response.status == 200:
                    logger.info("‚úÖ Ollama connection successful")
                    return True
                else:
                    logger.error(f"‚ùå Ollama connection failed: {response.status}")
                    return False
    except asyncio.TimeoutError:
        logger.warning("‚ö†Ô∏è Ollama server timeout - server not running")
        return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Ollama connection failed: {e}")
        return False

async def test_models_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–¥–µ–ª–µ–π"""
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get("http://localhost:8000/models") as response:
                if response.status == 200:
                    models_data = await response.json()
                    logger.info(f"‚úÖ Models endpoint: {models_data}")
                    return True
                else:
                    logger.error(f"‚ùå Models endpoint failed: {response.status}")
                    return False
    except asyncio.TimeoutError:
        logger.warning("‚ö†Ô∏è Models endpoint timeout")
        return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Models endpoint failed: {e}")
        return False

async def test_review_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        test_data = {
            "text": """
            –í–≤–µ–¥–µ–Ω–∏–µ
            
            –î–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ—Å–≤—è—â–µ–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –≤–ª–∏—è–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ.
            –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º—ã –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞ –±—ã—Å—Ç—Ä—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
            
            –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
            
            –í —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
            –î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
            
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            
            –ü–æ–ª—É—á–µ–Ω—ã –∑–Ω–∞—á–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ò–ò –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
            
            –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            
            –†–∞–±–æ—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã.
            
            –°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
            
            1. Smith, J. (2023). AI in Business. Journal of Technology.
            """,
            "metadata": {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –æ–± –ò–ò",
                "author": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä",
                "page_count": 5
            }
        }
        
        timeout = aiohttp.ClientTimeout(total=30)  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è review
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post("http://localhost:8000/review", json=test_data) as response:
                if response.status == 200:
                    review_data = await response.json()
                    logger.info("‚úÖ Review endpoint working")
                    logger.info(f"Review status: {review_data.get('success')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if review_data.get('success'):
                        results = review_data.get('results', {})
                        agent_results = results.get('agent_results', {})
                        
                        logger.info(f"Found agents: {list(agent_results.keys())}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Structure Agent
                        if 'StructureAgent' in agent_results:
                            structure_data = agent_results['StructureAgent']
                            found_sections = structure_data.get('found_sections', [])
                            logger.info(f"‚úÖ StructureAgent found sections: {found_sections}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Summary Agent
                        if 'SummaryAgent' in agent_results:
                            summary_data = agent_results['SummaryAgent']
                            summary_quality = summary_data.get('summary_quality', 'unknown')
                            logger.info(f"‚úÖ SummaryAgent quality: {summary_quality}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é
                        final_review = results.get('final_review', '')
                        if final_review:
                            logger.info(f"‚úÖ Final review generated ({len(final_review)} chars)")
                        
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Review endpoint failed: {response.status} - {error_text}")
                    return False
    except asyncio.TimeoutError:
        logger.warning("‚ö†Ô∏è Review endpoint timeout - taking too long")
        return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Review endpoint failed: {e}")
        return False

async def test_architecture_compliance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    logger.info("üîç Testing Architecture Compliance...")
    
    compliance_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    required_files = [
        "src/app.py",  # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        "src/api/llm_server.py",  # FastAPI —Å–µ—Ä–≤–µ—Ä
        "src/bot/handlers.py",  # Telegram handlers
        "docker/docker-compose.yml",  # Docker compose
        "docker/Dockerfile",  # Dockerfile
        "config/requirements.txt"  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    ]
    
    for file_path in required_files:
        if not Path(file_path).exists():
            compliance_issues.append(f"Missing file: {file_path}")
        else:
            logger.info(f"‚úÖ Found: {file_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ bot/handlers.py –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    handlers_path = Path("src/bot/handlers.py")
    if handlers_path.exists():
        with open(handlers_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        forbidden_imports = [
            "from core.orchestrator import",
            "from core.agents.",
            "from core.pdf_extractor import"
        ]
        
        for forbidden_import in forbidden_imports:
            if forbidden_import in content:
                compliance_issues.append(f"FORBIDDEN IMPORT in handlers.py: {forbidden_import}")
            else:
                logger.info(f"‚úÖ No forbidden import: {forbidden_import}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ –≤ handlers
    if handlers_path.exists():
        with open(handlers_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        if "aiohttp" in content and "LLMServiceClient" in content:
            logger.info("‚úÖ Bot uses HTTP client instead of direct imports")
        else:
            compliance_issues.append("Bot doesn't use HTTP client properly")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    required_dirs = ["src", "docker", "config", "tests", "scripts", "docs"]
    for dir_path in required_dirs:
        if not Path(dir_path).exists():
            compliance_issues.append(f"Missing directory: {dir_path}")
        else:
            logger.info(f"‚úÖ Found directory: {dir_path}")
    
    return compliance_issues

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ Starting Architecture Testing...")
    
    # –¢–µ—Å—Ç 1: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
    compliance_issues = await test_architecture_compliance()
    
    if compliance_issues:
        logger.error("‚ùå ARCHITECTURE COMPLIANCE ISSUES:")
        for issue in compliance_issues:
            logger.error(f"  - {issue}")
        return False
    else:
        logger.info("‚úÖ Architecture compliance check passed")
    
    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–æ–∫)
    logger.info("\nüì° Testing Service Connections...")
    
    fastapi_ok = await test_fastapi_server()
    ollama_ok = await test_ollama_connection()
    
    services_running = fastapi_ok and ollama_ok
    
    if not fastapi_ok:
        logger.warning("‚ö†Ô∏è FastAPI server not available")
        logger.info("üí° To start server: cd docker && docker-compose up -d")
    
    if not ollama_ok:
        logger.warning("‚ö†Ô∏è Ollama server not available")  
        logger.info("üí° To start ollama: cd docker && docker-compose up -d ollama")
    
    # –¢–µ—Å—Ç 3: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç)
    if services_running:
        logger.info("\nüîß Testing API Endpoints...")
        
        models_ok = await test_models_endpoint()
        review_ok = await test_review_endpoint()
        
        if models_ok and review_ok:
            logger.info("\nüéâ ALL TESTS PASSED!")
            logger.info("‚úÖ Architecture complies with requirements")
            logger.info("‚úÖ FastAPI server working correctly")
            logger.info("‚úÖ Ollama connection established")
            logger.info("‚úÖ All endpoints responding")
            logger.info("‚úÖ Agent system working properly")
            return True
        else:
            logger.warning("‚ö†Ô∏è Some API endpoints failed - check server status")
            return False
    else:
        logger.info("\n‚úÖ ARCHITECTURE TESTS PASSED!")
        logger.info("‚úÖ Architecture complies with requirements")
        logger.info("‚úÖ Proper project structure")
        logger.info("‚ö†Ô∏è Service connectivity tests skipped (servers not running)")
        logger.info("üí° To run full tests: cd docker && docker-compose up -d")
        return True

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("\nTest interrupted by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Test failed with error: {e}")
        sys.exit(1) 