#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.pdf_extractor import PDFExtractor
from core.orchestrator import Orchestrator
from core.agents.structure_agent import StructureAgent
from core.agents.summary_agent import SummaryAgent

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\n1. üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        pdf_extractor = PDFExtractor()
        print("   ‚úÖ PDF Extractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PDF Extractor: {e}")
        return False
    
    try:
        structure_agent = StructureAgent()
        print("   ‚úÖ Structure Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Structure Agent: {e}")
        return False
    
    try:
        summary_agent = SummaryAgent()
        print("   ‚úÖ Summary Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Summary Agent: {e}")
        return False
    
    try:
        orchestrator = Orchestrator()
        print("   ‚úÖ Orchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Orchestrator: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    print("\n2. üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
    try:
        orchestrator.register_agent("StructureAgent", structure_agent)
        print("   ‚úÖ Structure Agent –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        orchestrator.register_agent("SummaryAgent", summary_agent)
        print("   ‚úÖ Summary Agent –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
    print("\n3. üèó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
    
    test_text = """
    Abstract
    This paper presents a novel approach to machine learning.
    
    Introduction
    Machine learning has become increasingly important in recent years.
    
    Methodology
    We used a supervised learning approach with neural networks.
    
    Results
    Our experiments show significant improvements over baseline methods.
    
    Discussion
    The results demonstrate the effectiveness of our approach.
    
    Conclusion
    We have presented a new method that achieves state-of-the-art results.
    
    References
    [1] Smith, J. et al. (2023). Machine Learning Advances.
    """
    
    test_metadata = {
        "title": "Test Paper",
        "page_count": 10,
        "author": "Test Author"
    }
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Structure Agent
    try:
        structure_results = await structure_agent.analyze(test_text, test_metadata)
        print(f"   ‚úÖ Structure Agent –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {structure_results.get('found_sections', [])}")
        print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {structure_results.get('structure_quality', 'unknown')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Structure Agent: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Summary Agent
    try:
        summary_results = await summary_agent.analyze(test_text, test_metadata)
        print(f"   ‚úÖ Summary Agent –≤—ã–ø–æ–ª–Ω–µ–Ω")
        summary = summary_results.get('summary', '')
        if summary:
            print(f"   üìù –†–µ–∑—é–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ: {summary_results.get('summary_quality', 'unknown')}")
        print(f"   üìä –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã: {summary_results.get('key_topics', [])}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Summary Agent –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–≤–æ–∑–º–æ–∂–Ω–æ, LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω): {e}")
        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ LLM –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    print("\n4. üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        health = await orchestrator.health_check()
        print(f"   ‚úÖ Health check –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {health.get('orchestrator', 'unknown')}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤: {health.get('agents', {})}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å LLM: {health.get('llm', 'unknown')}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Health check –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {e}")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\n5. üé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    try:
        results = await orchestrator.process_paper(test_text, test_metadata)
        print(f"   ‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results.get('processing_status', 'unknown')}")
        
        if results.get('processing_status') == 'success':
            print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã")
            review = results.get('final_review', '')
            if review:
                print(f"   üìù –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(review)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print(f"   ‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è –ø—É—Å—Ç–∞—è (–≤–æ–∑–º–æ–∂–Ω–æ, LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("\nüí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
    print("   ‚Ä¢ Ollama –∑–∞–ø—É—â–µ–Ω (ollama serve)")
    print("   ‚Ä¢ –ú–æ–¥–µ–ª—å qwen3:4b –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print("   ‚Ä¢ BOT_TOKEN —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")
    
    return True

def test_file_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤"""
    print("\n6. üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
    
    pdf_extractor = PDFExtractor()
    
    # –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    assert pdf_extractor.validate_file_extension("document.pdf") == True
    assert pdf_extractor.validate_file_extension("document.txt") == False
    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
    assert pdf_extractor.validate_file_size(1024) == True  # 1KB
    assert pdf_extractor.validate_file_size(20 * 1024 * 1024) == False  # 20MB
    print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        success = await test_components()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        test_file_validation()
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            return 0
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            return 1
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main()) 