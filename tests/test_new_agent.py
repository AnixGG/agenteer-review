#!/usr/bin/env python3
"""
üÜï –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import logging
import sys
import os
import importlib
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class NewAgentTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        # –ü—É—Ç—å –∫ –∞–≥–µ–Ω—Ç–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).parent.parent
        self.agents_dir = project_root / "src" / "core" / "agents"
        self.known_agents = {"base_agent.py", "structure_agent.py", "summary_agent.py", "__init__.py"}
    
    def find_new_agents(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if not self.agents_dir.exists():
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.agents_dir}")
            return []
        
        all_files = set(f.name for f in self.agents_dir.glob("*.py"))
        new_agents = all_files - self.known_agents
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(all_files)}")
        logger.info(f"–ù–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(new_agents)}")
        
        return list(new_agents)
    
    async def test_agent_import(self, agent_file: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–∞"""
        try:
            module_name = agent_file.replace(".py", "")
            full_module_name = f"core.agents.{module_name}"
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
            module = importlib.import_module(full_module_name)
            logger.info(f"‚úÖ –ú–æ–¥—É–ª—å {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ò—â–µ–º –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "Agent", –Ω–æ –Ω–µ –±—ã—Ç—å BaseAgent)
            agent_classes = [
                name for name in dir(module) 
                if name.endswith("Agent") and not name.startswith("_") and name != "BaseAgent"
            ]
            
            if not agent_classes:
                logger.warning(f"‚ö†Ô∏è –í –º–æ–¥—É–ª–µ {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
                return False
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤: {agent_classes}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å
            for class_name in agent_classes:
                agent_class = getattr(module, class_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Å
                if not isinstance(agent_class, type):
                    continue
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
                try:
                    agent_instance = agent_class()
                    logger.info(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {class_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ analyze
                    if hasattr(agent_instance, 'analyze'):
                        logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ analyze –Ω–∞–π–¥–µ–Ω –≤ {class_name}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ analyze –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {class_name}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {class_name}: {e}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {agent_file}: {e}")
            return False
    
    async def test_agent_integration(self, agent_file: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ —Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            from core.orchestrator import Orchestrator
            
            module_name = agent_file.replace(".py", "")
            full_module_name = f"core.agents.{module_name}"
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å—ã –∞–≥–µ–Ω—Ç–æ–≤
            module = importlib.import_module(full_module_name)
            agent_classes = [
                name for name in dir(module) 
                if name.endswith("Agent") and not name.startswith("_") and name != "BaseAgent"
            ]
            
            orchestrator = Orchestrator()
            
            for class_name in agent_classes:
                agent_class = getattr(module, class_name)
                
                if not isinstance(agent_class, type):
                    continue
                
                try:
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                    agent_instance = agent_class()
                    orchestrator.register_agent(class_name, agent_instance)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                    if class_name in orchestrator.agents:
                        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {class_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ")
                    else:
                        logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {class_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                        return False
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {class_name}: {e}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {agent_file}: {e}")
            return False
    
    async def test_agent_functionality(self, agent_file: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        try:
            module_name = agent_file.replace(".py", "")
            full_module_name = f"core.agents.{module_name}"
            
            module = importlib.import_module(full_module_name)
            agent_classes = [
                name for name in dir(module) 
                if name.endswith("Agent") and not name.startswith("_") and name != "BaseAgent"
            ]
            
            test_text = """
            Abstract
            This paper presents a novel approach to machine learning.
            
            1. Introduction
            Machine learning has become increasingly important.
            
            2. Methodology  
            We used supervised learning with neural networks.
            
            3. Results
            Our experiments show significant improvements.
            
            4. Conclusion
            We have presented a new method with state-of-the-art results.
            
            References
            [1] Smith, J. et al. (2023). ML Advances.
            """
            
            test_metadata = {
                "title": "Test Paper",
                "author": "Test Author",
                "page_count": 5
            }
            
            for class_name in agent_classes:
                agent_class = getattr(module, class_name)
                
                if not isinstance(agent_class, type):
                    continue
                
                try:
                    agent_instance = agent_class()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ analyze
                    if hasattr(agent_instance, 'analyze'):
                        results = await agent_instance.analyze(test_text, test_metadata)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if isinstance(results, dict):
                            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {class_name} –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                            logger.info(f"üìä –ö–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {list(results.keys())}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {class_name} –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                            return False
                    else:
                        logger.warning(f"‚ö†Ô∏è –£ –∞–≥–µ–Ω—Ç–∞ {class_name} –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ analyze")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ {class_name}: {e}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {agent_file}: {e}")
            return False
    
    async def test_all_new_agents(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã"""
        new_agents = self.find_new_agents()
        
        if not new_agents:
            logger.info("üéâ –ù–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(new_agents)} –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        all_passed = True
        
        for agent_file in new_agents:
            logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: {agent_file}")
            logger.info("-" * 50)
            
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
            if not await self.test_agent_import(agent_file):
                logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agent_file} –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞")
                all_passed = False
                continue
            
            # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            if not await self.test_agent_integration(agent_file):
                logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agent_file} –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
                all_passed = False
                continue
            
            # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if not await self.test_agent_functionality(agent_file):
                logger.error(f"‚ùå –ê–≥–µ–Ω—Ç {agent_file} –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
                all_passed = False
                continue
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_file} –ø—Ä–æ—à–µ–ª –≤—Å–µ —Ç–µ—Å—Ç—ã")
        
        return all_passed

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    logger.info("üÜï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    logger.info("=" * 50)
    
    tester = NewAgentTester()
    
    try:
        success = await tester.test_all_new_agents()
        
        if success:
            logger.info("\nüéâ –í—Å–µ –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏")
            return 0
        else:
            logger.error("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
            return 1
            
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 