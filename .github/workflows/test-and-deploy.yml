name: üß™ Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: cr.yandex/crphvdf8t7v4bpqnv3g5

jobs:
  # Unit –∏ Integration —Ç–µ—Å—Ç—ã
  test:
    name: üî¨ Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: üìã Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
    
    - name: üß™ Run local tests
      run: |
        python test_local.py
    
    - name: üß™ Run unit tests
      run: |
        python test_deployment.py --unit-only
    
    - name: üìä Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          *.log
          test-*.xml

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile'–æ–≤
  docker-build:
    name: üê≥ Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üèóÔ∏è Build Bot Docker image
      run: |
        docker build -t test-bot:latest -f Dockerfile.bot .
    
    - name: üèóÔ∏è Build LLM Docker image
      run: |
        docker build -t test-llm:latest -f Dockerfile.llm .
    
    - name: üîç Test Docker images
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã
        docker images | grep test-bot
        docker images | grep test-llm
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤
        docker run --rm test-bot:latest python -c "import bot_service; print('Bot service import OK')"
        docker run --rm test-llm:latest python -c "import llm_service; print('LLM service import OK')"

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Docker Compose
  integration-test:
    name: üîó Integration Test with Docker
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Set up Docker Compose
      run: |
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é docker-compose –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        cp docker-compose.production.yml docker-compose.test.yml
        
        # –ó–∞–º–µ–Ω—è–µ–º registry –æ–±—Ä–∞–∑—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ
        sed -i 's|cr.yandex/crphvdf8t7v4bpqnv3g5/telegram-bot:latest|test-bot:latest|g' docker-compose.test.yml
        sed -i 's|cr.yandex/crphvdf8t7v4bpqnv3g5/llm-service:latest|test-llm:latest|g' docker-compose.test.yml
    
    - name: üèóÔ∏è Build test images
      run: |
        docker build -t test-bot:latest -f Dockerfile.bot .
        docker build -t test-llm:latest -f Dockerfile.llm .
    
    - name: üöÄ Start services
      run: |
        export BOT_TOKEN="test_token_for_ci"
        docker-compose -f docker-compose.test.yml up -d
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        sleep 30
    
    - name: üîç Check services health
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
        docker-compose -f docker-compose.test.yml ps
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check LLM —Å–µ—Ä–≤–∏—Å–∞
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
        docker-compose -f docker-compose.test.yml logs telegram-bot | grep -i error && exit 1 || true
        docker-compose -f docker-compose.test.yml logs llm-service | grep -i error && exit 1 || true
    
    - name: üß™ Run integration tests
      run: |
        export LLM_SERVICE_URL="http://localhost:8000"
        python test_deployment.py --deployment-only
    
    - name: üßπ Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
  new-agents-test:
    name: üÜï New Agents Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: üìã Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üÜï Test new agents
      run: |
        python test_new_agent.py

  # –î–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏)
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test, new-agents-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üîë Login to Yandex Container Registry
      env:
        YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
      run: |
        echo "$YC_SERVICE_ACCOUNT_KEY" | base64 -d > key.json
        docker login --username json_key --password-file key.json cr.yandex
        rm key.json
    
    - name: üèóÔ∏è Build and push Bot image
      run: |
        docker build -t $REGISTRY/telegram-bot:latest -f Dockerfile.bot .
        docker push $REGISTRY/telegram-bot:latest
        
        # –¢–µ–≥–∏—Ä—É–µ–º —Å –≤–µ—Ä—Å–∏–µ–π
        docker tag $REGISTRY/telegram-bot:latest $REGISTRY/telegram-bot:$GITHUB_SHA
        docker push $REGISTRY/telegram-bot:$GITHUB_SHA
    
    - name: üèóÔ∏è Build and push LLM image
      run: |
        docker build -t $REGISTRY/llm-service:latest -f Dockerfile.llm .
        docker push $REGISTRY/llm-service:latest
        
        # –¢–µ–≥–∏—Ä—É–µ–º —Å –≤–µ—Ä—Å–∏–µ–π
        docker tag $REGISTRY/llm-service:latest $REGISTRY/llm-service:$GITHUB_SHA
        docker push $REGISTRY/llm-service:$GITHUB_SHA
    
    - name: üìã Create deployment summary
      run: |
        echo "üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
        echo "- **Images pushed:**" >> $GITHUB_STEP_SUMMARY
        echo "  - \`$REGISTRY/telegram-bot:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`$REGISTRY/llm-service:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Ready for VM deployment!" >> $GITHUB_STEP_SUMMARY

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–ø–ª–æ–µ
  notify:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: üì¢ Deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful! New images are ready."
          echo "Run the following on your VM to update:"
          echo "  ./update_deployment.sh"
        else
          echo "‚ùå Deployment failed! Check the logs above."
        fi 