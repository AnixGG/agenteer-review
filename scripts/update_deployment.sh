#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./update_deployment.sh [bot-only|llm-only|full-test]

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REGISTRY="cr.yandex/crphvdf8t7v4bpqnv3g5"
DOCKER_COMPOSE_FILE="docker-compose.production.yml"
BACKUP_TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v git &> /dev/null; then
        log_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup
create_backup() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–∏—Ö –æ–±—Ä–∞–∑–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f $DOCKER_COMPOSE_FILE down
    
    # –°–æ–∑–¥–∞–µ–º backup –æ–±—Ä–∞–∑–æ–≤
    if docker image inspect $REGISTRY/telegram-bot:latest &> /dev/null; then
        docker tag $REGISTRY/telegram-bot:latest $REGISTRY/telegram-bot:backup-$BACKUP_TIMESTAMP
        log_success "Backup –æ–±—Ä–∞–∑–∞ telegram-bot —Å–æ–∑–¥–∞–Ω"
    fi
    
    if docker image inspect $REGISTRY/llm-service:latest &> /dev/null; then
        docker tag $REGISTRY/llm-service:latest $REGISTRY/llm-service:backup-$BACKUP_TIMESTAMP
        log_success "Backup –æ–±—Ä–∞–∑–∞ llm-service —Å–æ–∑–¥–∞–Ω"
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
update_code() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    CURRENT_BRANCH=$(git branch --show-current)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if ! git diff --quiet; then
        log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        git status
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_error "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
            exit 1
        fi
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    git fetch origin
    git pull origin $CURRENT_BRANCH
    
    log_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    local component=$1
    
    case $component in
        "bot-only")
            log_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ telegram-bot..."
            docker build -t $REGISTRY/telegram-bot:latest -f Dockerfile.bot .
            docker push $REGISTRY/telegram-bot:latest
            log_success "–û–±—Ä–∞–∑ telegram-bot —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
            ;;
        "llm-only")
            log_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ llm-service..."
            docker build -t $REGISTRY/llm-service:latest -f Dockerfile.llm .
            docker push $REGISTRY/llm-service:latest
            log_success "–û–±—Ä–∞–∑ llm-service —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
            ;;
        *)
            log_info "–°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤..."
            docker build -t $REGISTRY/telegram-bot:latest -f Dockerfile.bot .
            docker build -t $REGISTRY/llm-service:latest -f Dockerfile.llm .
            docker push $REGISTRY/telegram-bot:latest
            docker push $REGISTRY/llm-service:latest
            log_success "–í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    local component=$1
    
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    case $component in
        "bot-only")
            docker-compose -f $DOCKER_COMPOSE_FILE up -d telegram-bot
            ;;
        "llm-only")
            docker-compose -f $DOCKER_COMPOSE_FILE up -d llm-service
            ;;
        *)
            docker-compose -f $DOCKER_COMPOSE_FILE up -d
            ;;
    esac
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if ! docker-compose -f $DOCKER_COMPOSE_FILE ps | grep -q "Up"; then
        log_error "–ù–µ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
        docker-compose -f $DOCKER_COMPOSE_FILE ps
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check LLM —Å–µ—Ä–≤–∏—Å–∞
    local retries=0
    local max_retries=12  # 2 –º–∏–Ω—É—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 —Å–µ–∫—É–Ω–¥
    
    while [ $retries -lt $max_retries ]; do
        if curl -f http://localhost:8000/health &> /dev/null; then
            log_success "LLM —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
            break
        fi
        
        log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ LLM —Å–µ—Ä–≤–∏—Å–∞... ($((retries + 1))/$max_retries)"
        sleep 10
        ((retries++))
    done
    
    if [ $retries -eq $max_retries ]; then
        log_error "LLM —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
        return 1
    fi
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    return 0
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -f "test_deployment.py" ]; then
        python3 test_deployment.py
        if [ $? -eq 0 ]; then
            log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        else
            log_error "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
            return 1
        fi
    else
        log_warning "–§–∞–π–ª test_deployment.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã"
    fi
    
    return 0
}

# –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
rollback() {
    log_warning "–û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f $DOCKER_COMPOSE_FILE down
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º backup –æ–±—Ä–∞–∑—ã
    if docker image inspect $REGISTRY/telegram-bot:backup-$BACKUP_TIMESTAMP &> /dev/null; then
        docker tag $REGISTRY/telegram-bot:backup-$BACKUP_TIMESTAMP $REGISTRY/telegram-bot:latest
    fi
    
    if docker image inspect $REGISTRY/llm-service:backup-$BACKUP_TIMESTAMP &> /dev/null; then
        docker tag $REGISTRY/llm-service:backup-$BACKUP_TIMESTAMP $REGISTRY/llm-service:latest
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
    docker-compose -f $DOCKER_COMPOSE_FILE up -d
    
    log_success "–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
cleanup_backups() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º backup'—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
    grep backup | \
    awk '{print $1}' | \
    while read image; do
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–≥–∞
        date_str=$(echo $image | grep -o '[0-9]\{8\}-[0-9]\{6\}')
        if [ ! -z "$date_str" ]; then
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ timestamp
            backup_date=$(date -d "${date_str:0:8} ${date_str:9:2}:${date_str:11:2}:${date_str:13:2}" +%s 2>/dev/null || echo 0)
            current_date=$(date +%s)
            
            # –ï—Å–ª–∏ backup —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π, —É–¥–∞–ª—è–µ–º
            if [ $((current_date - backup_date)) -gt 604800 ]; then  # 7 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ backup: $image"
                docker rmi $image || true
            fi
        fi
    done
    
    log_success "–û—á–∏—Å—Ç–∫–∞ backup'–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local mode=${1:-"full"}
    
    echo "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞"
    echo "–†–µ–∂–∏–º: $mode"
    echo "–í—Ä–µ–º—è: $(date)"
    echo "=================================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –°–æ–∑–¥–∞–µ–º backup
    create_backup
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    update_code
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
    build_images $mode
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    start_services $mode
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    if ! health_check; then
        log_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç"
        rollback
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º full-test
    if [ "$mode" = "full-test" ]; then
        if ! run_tests; then
            log_error "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç"
            rollback
            exit 1
        fi
    fi
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ backup'—ã
    cleanup_backups
    
    log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f $DOCKER_COMPOSE_FILE ps
    
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  –õ–æ–≥–∏ –±–æ—Ç–∞: docker-compose -f $DOCKER_COMPOSE_FILE logs -f telegram-bot"
    echo "  –õ–æ–≥–∏ LLM:  docker-compose -f $DOCKER_COMPOSE_FILE logs -f llm-service"
    echo "  –°—Ç–∞—Ç—É—Å:    docker-compose -f $DOCKER_COMPOSE_FILE ps"
    echo "  Health:    curl http://localhost:8000/health"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_error "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@" 