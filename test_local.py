#!/usr/bin/env python3
"""
üè† –¢–µ—Å—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import asyncio
import logging
import sys
import os
import time
from pathlib import Path
from typing import Dict, Any, List
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class LocalTestRunner:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self):
        self.start_time = time.time()
        self.passed = 0
        self.failed = 0
    
    def test_result(self, test_name: str, success: bool, message: str = ""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        if success:
            self.passed += 1
            logger.info(f"‚úÖ {test_name}")
        else:
            self.failed += 1
            logger.error(f"‚ùå {test_name}: {message}")
    
    async def test_imports(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            from core.orchestrator import Orchestrator
            from core.pdf_extractor import PDFExtractor
            from core.agents.structure_agent import StructureAgent
            from core.agents.base_agent import BaseAgent
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            from bot.config import config
            
            self.test_result("Core imports", True)
            
        except Exception as e:
            self.test_result("Core imports", False, str(e))
    
    async def test_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from bot.config import config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            required_attrs = ['TEMP_DIR', 'MAX_FILE_SIZE']
            
            for attr in required_attrs:
                if not hasattr(config, attr):
                    raise Exception(f"Missing config attribute: {attr}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            temp_dir = Path(config.TEMP_DIR)
            if not temp_dir.exists():
                temp_dir.mkdir(parents=True, exist_ok=True)
            
            self.test_result("Configuration", True)
            
        except Exception as e:
            self.test_result("Configuration", False, str(e))
    
    async def test_pdf_extractor_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞"""
        try:
            from core.pdf_extractor import PDFExtractor
            
            extractor = PDFExtractor()
            
            # –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            assert extractor.validate_file_extension("test.pdf") == True
            assert extractor.validate_file_extension("test.txt") == False
            assert extractor.validate_file_size(1024) == True
            assert extractor.validate_file_size(50 * 1024 * 1024) == False
            
            self.test_result("PDF extractor basic", True)
            
        except Exception as e:
            self.test_result("PDF extractor basic", False, str(e))
    
    async def test_structure_agent_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        try:
            from core.agents.structure_agent import StructureAgent
            
            agent = StructureAgent()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            test_text = """
            Abstract
            This is a test.
            
            Introduction
            This is introduction.
            
            Conclusion
            This is conclusion.
            """
            
            # –ú–æ–∫–∞–µ–º LLM –≤—ã–∑–æ–≤ –µ—Å–ª–∏ Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            with patch('ollama.AsyncClient') as mock_client:
                mock_instance = AsyncMock()
                mock_client.return_value = mock_instance
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç
                mock_instance.generate.return_value = {
                    'response': '{"found_sections": ["Abstract", "Introduction", "Conclusion"], "structure_quality": "good"}'
                }
                
                results = await agent.analyze(test_text, {"title": "Test"})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                assert isinstance(results, dict)
                assert "found_sections" in results
                
            self.test_result("Structure agent basic", True)
            
        except Exception as e:
            self.test_result("Structure agent basic", False, str(e))
    
    async def test_orchestrator_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            from core.orchestrator import Orchestrator
            from core.agents.structure_agent import StructureAgent
            
            orchestrator = Orchestrator()
            agent = StructureAgent()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
            orchestrator.register_agent("TestAgent", agent)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            assert "TestAgent" in orchestrator.agents
            
            self.test_result("Orchestrator basic", True)
            
        except Exception as e:
            self.test_result("Orchestrator basic", False, str(e))
    
    async def test_bot_handlers_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
        try:
            import bot_service_handlers
            from bot.keyboards import get_main_keyboard
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ router —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert hasattr(bot_service_handlers, 'router')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_main_keyboard()
            assert keyboard is not None
            
            self.test_result("Bot handlers import", True)
            
        except Exception as e:
            self.test_result("Bot handlers import", False, str(e))
    
    async def test_llm_service_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ LLM —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            import llm_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FastAPI app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            assert hasattr(llm_service, 'app')
            
            self.test_result("LLM service import", True)
            
        except Exception as e:
            self.test_result("LLM service import", False, str(e))
    
    async def test_file_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        try:
            required_files = [
                "bot_service.py",
                "llm_service.py", 
                "core/orchestrator.py",
                "core/pdf_extractor.py",
                "core/agents/base_agent.py",
                "core/agents/structure_agent.py",
                "bot/config.py",
                "bot/keyboards.py",
                "requirements.txt",
                "Dockerfile.bot",
                "Dockerfile.llm",
                "docker-compose.production.yml"
            ]
            
            missing_files = []
            for file_path in required_files:
                if not Path(file_path).exists():
                    missing_files.append(file_path)
            
            if missing_files:
                raise Exception(f"Missing files: {missing_files}")
            
            self.test_result("File structure", True)
            
        except Exception as e:
            self.test_result("File structure", False, str(e))
    
    async def test_dependencies(self):
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            import aiogram
            import aiohttp
            import fastapi
            import uvicorn
            import ollama
            import pydantic
            
            self.test_result("Dependencies", True)
            
        except ImportError as e:
            self.test_result("Dependencies", False, f"Missing dependency: {e}")
        except Exception as e:
            self.test_result("Dependencies", False, str(e))
    
    async def run_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üè† –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        logger.info("=" * 50)
        
        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_imports()
        await self.test_config()
        await self.test_file_structure()
        await self.test_dependencies()
        
        # –¢–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self.test_pdf_extractor_basic()
        await self.test_structure_agent_basic()
        await self.test_orchestrator_basic()
        
        # –¢–µ—Å—Ç—ã –º–æ–¥—É–ª–µ–π
        await self.test_bot_handlers_import()
        await self.test_llm_service_import()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        duration = time.time() - self.start_time
        total = self.passed + self.failed
        
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        if self.failed == 0:
            print(f"‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã: {self.passed}/{total} –∑–∞ {duration:.2f}s")
            print("üéâ –ö–æ–¥ –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞!")
        else:
            print(f"‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: {self.passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            print(f"üí• –ù–µ –ø—Ä–æ—à–ª–æ: {self.failed} —Ç–µ—Å—Ç–æ–≤")
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º")
        
        print("=" * 50)
        
        return self.failed == 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    runner = LocalTestRunner()
    
    try:
        success = await runner.run_all()
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        return 1
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 