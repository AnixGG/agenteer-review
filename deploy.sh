#!/bin/bash
# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Yandex Cloud

set -e

echo "üöÄ Starting deployment to Yandex Cloud..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
command -v yc >/dev/null 2>&1 || { echo "‚ùå yc CLI not installed"; exit 1; }
command -v kubectl >/dev/null 2>&1 || { echo "‚ùå kubectl not installed"; exit 1; }
command -v docker >/dev/null 2>&1 || { echo "‚ùå docker not installed"; exit 1; }

# –ü–æ–ª—É—á–∞–µ–º Registry ID
REGISTRY_ID=$(yc container registry get --name my-registry --format json | jq -r .id)
echo "üì¶ Using registry: $REGISTRY_ID"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞
echo "üîç Checking cluster status..."
CLUSTER_STATUS=$(yc managed-kubernetes cluster get --name my-cluster --format json | jq -r .status)
echo "Cluster status: $CLUSTER_STATUS"

if [ "$CLUSTER_STATUS" != "RUNNING" ]; then
    echo "‚è≥ Cluster is not ready yet. Current status: $CLUSTER_STATUS"
    echo "Please wait for cluster to be in RUNNING state and try again."
    exit 1
fi

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º kubectl
echo "üîß Configuring kubectl..."
yc managed-kubernetes cluster get-credentials --name my-cluster --external

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
echo "‚úÖ Testing cluster connection..."
kubectl cluster-info

# –°–æ–∑–¥–∞–µ–º node group –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
echo "üèóÔ∏è Checking node groups..."
NODE_GROUP_COUNT=$(yc managed-kubernetes node-group list --cluster-name my-cluster --format json | jq length)
if [ "$NODE_GROUP_COUNT" -eq 0 ]; then
    echo "Creating node group..."
    yc managed-kubernetes node-group create \
        --name standard-nodes \
        --cluster-name my-cluster \
        --platform-id standard-v3 \
        --cores 2 \
        --memory 8 \
        --disk-size 50 \
        --fixed-size 2 \
        --async
    
    echo "‚è≥ Node group is being created. Please wait and run this script again."
    exit 0
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if [ -z "$BOT_TOKEN" ]; then
    echo "‚ùå BOT_TOKEN environment variable is not set"
    echo "Please set it with: export BOT_TOKEN=your_bot_token_here"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
echo "üîê Creating secrets..."
./k8s/create-secrets.sh

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
echo "üìã Deploying applications..."
kubectl apply -f k8s/llm-deployment.yaml
kubectl apply -f k8s/bot-deployment.yaml

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
echo "üìà Setting up autoscaling..."
kubectl autoscale deployment telegram-bot --cpu-percent=70 --min=2 --max=10

echo "üéâ Deployment completed!"
echo ""
echo "üìä Checking deployment status:"
kubectl get pods
echo ""
echo "üìù To monitor logs:"
echo "kubectl logs -f deployment/telegram-bot"
echo "kubectl logs -f deployment/llm-service"
echo ""
echo "üîç To check services:"
echo "kubectl get services" 