from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

def format_review(results: Dict[str, Any], metadata: Dict[str, Any] = None, verbose: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –≤ results)
        verbose: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏
    """
    try:
        if results.get("processing_status") == "error":
            return format_error_message(results.get("error", "Unknown error"))
        
        formatted_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        formatted_parts.append("üìÑ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏*\n")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        paper_metadata = metadata or results.get("metadata", {})
        if paper_metadata:
            formatted_parts.append("üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ:*")
            
            if paper_metadata.get("title"):
                title = paper_metadata["title"]
                if len(title) > 100:
                    title = title[:100] + "..."
                formatted_parts.append(f"‚Ä¢ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}")
            
            if paper_metadata.get("author"):
                formatted_parts.append(f"‚Ä¢ *–ê–≤—Ç–æ—Ä:* {paper_metadata['author']}")
            
            if paper_metadata.get("page_count"):
                formatted_parts.append(f"‚Ä¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:* {paper_metadata['page_count']}")
            
            formatted_parts.append("")
        
        if verbose:
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–æ–≤ (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            agent_results = results.get("agent_results", {})
            
            formatted_parts.append("üîç *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–æ–≤:*\n")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if "StructureAgent" in agent_results:
                structure_formatted = format_structure_analysis(agent_results["StructureAgent"])
                formatted_parts.append(structure_formatted)
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (Summary Agent)
            if "SummaryAgent" in agent_results:
                summary_formatted = format_summary_analysis(agent_results["SummaryAgent"])
                formatted_parts.append(summary_formatted)
            
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è
        final_review = results.get("final_review", "")
        if final_review:
            formatted_parts.append("üìù *–†–µ—Ü–µ–Ω–∑–∏—è:*\n")
            formatted_parts.append(final_review)
        
        return "\n".join(formatted_parts)
        
    except Exception as e:
        logger.error(f"Error formatting review: {e}")
        return format_error_message(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def format_structure_analysis(structure_results) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    parts = ["üèó *–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏:*"]
    
    # –ê–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç LLM
    if isinstance(structure_results, str):
        if structure_results.startswith("ERROR:"):
            parts.append(f"‚ùå *–û—à–∏–±–∫–∞:* {structure_results[6:].strip()}")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 400 —Å–∏–º–≤–æ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = structure_results[:400] + "..." if len(structure_results) > 400 else structure_results
            parts.append(f"üìÑ *–ê–Ω–∞–ª–∏–∑:*\n{analysis_text}")
    elif isinstance(structure_results, dict) and "result" in structure_results:
        result_text = structure_results["result"]
        if result_text.startswith("ERROR:"):
            parts.append(f"‚ùå *–û—à–∏–±–∫–∞:* {result_text[6:].strip()}")
        else:
            analysis_text = result_text[:400] + "..." if len(result_text) > 400 else result_text
            parts.append(f"üìÑ *–ê–Ω–∞–ª–∏–∑:*\n{analysis_text}")
    else:
        parts.append("‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*")
    
    parts.append("")
    return "\n".join(parts)

def format_summary_analysis(summary_results) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
    parts = ["üìö *–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:*"]
    
    # –ê–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç LLM
    if isinstance(summary_results, str):
        if summary_results.startswith("ERROR:"):
            parts.append(f"‚ùå *–û—à–∏–±–∫–∞:* {summary_results[6:].strip()}")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—é–º–µ
            summary_text = summary_results[:500] + "..." if len(summary_results) > 500 else summary_results
            parts.append(f"üìñ *–†–µ–∑—é–º–µ:*\n{summary_text}")
    elif isinstance(summary_results, dict) and "result" in summary_results:
        result_text = summary_results["result"]
        if result_text.startswith("ERROR:"):
            parts.append(f"‚ùå *–û—à–∏–±–∫–∞:* {result_text[6:].strip()}")
        else:
            summary_text = result_text[:500] + "..." if len(result_text) > 500 else result_text
            parts.append(f"üìñ *–†–µ–∑—é–º–µ:*\n{summary_text}")
    else:
        parts.append("‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*")
    
    parts.append("")
    return "\n".join(parts)

def get_quality_emoji(quality: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    quality_emojis = {
        "excellent": "üåü",
        "good": "‚úÖ", 
        "fair": "‚ö†Ô∏è",
        "poor": "‚ùå",
        "unknown": "‚ùì"
    }
    return quality_emojis.get(quality, "‚ùì")

def format_error_message(error: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return f"""‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏*

üîç *–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:*
{error}

üí° *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑."""

def format_progress_message(stage: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    stage_messages = {
        "downloading": "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...",
        "extracting": "üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF...",
        "analyzing_structure": "üèó –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç—å–∏...",
        "analyzing_content": "üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...",
        "generating_review": "üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é...",
        "finalizing": "‚úÖ –ó–∞–≤–µ—Ä—à–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
    }
    
    return stage_messages.get(stage, f"üîÑ {stage}...")

def truncate_text(text: str, max_length: int = 4000) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è Telegram
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
    return text[:max_length - 3] + "..."

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram"""
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram MarkdownV2
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text 