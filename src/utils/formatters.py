from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

def format_review(results: Dict[str, Any], metadata: Dict[str, Any] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –≤ results)
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏
    """
    try:
        if results.get("processing_status") == "error":
            return format_error_message(results.get("error", "Unknown error"))
        
        formatted_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        formatted_parts.append("üìÑ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏*\n")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        paper_metadata = metadata or results.get("metadata", {})
        if paper_metadata:
            formatted_parts.append("üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—å–µ:*")
            
            if paper_metadata.get("title"):
                title = paper_metadata["title"]
                if len(title) > 100:
                    title = title[:100] + "..."
                formatted_parts.append(f"‚Ä¢ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}")
            
            if paper_metadata.get("author"):
                formatted_parts.append(f"‚Ä¢ *–ê–≤—Ç–æ—Ä:* {paper_metadata['author']}")
            
            if paper_metadata.get("page_count"):
                formatted_parts.append(f"‚Ä¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:* {paper_metadata['page_count']}")
            
            formatted_parts.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–æ–≤
        agent_results = results.get("agent_results", {})
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if "StructureAgent" in agent_results:
            structure_formatted = format_structure_analysis(agent_results["StructureAgent"])
            formatted_parts.append(structure_formatted)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (Summary Agent)
        if "SummaryAgent" in agent_results:
            summary_formatted = format_summary_analysis(agent_results["SummaryAgent"])
            formatted_parts.append(summary_formatted)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è
        final_review = results.get("final_review", "")
        if final_review:
            formatted_parts.append("üìù *–ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è:*\n")
            formatted_parts.append(final_review)
        
        return "\n".join(formatted_parts)
        
    except Exception as e:
        logger.error(f"Error formatting review: {e}")
        return format_error_message(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def format_structure_analysis(structure_results: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    if "error" in structure_results:
        return f"‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:* {structure_results['error']}\n"
    
    parts = ["üèó *–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏:*"]
    
    # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    found_sections = structure_results.get("found_sections", [])
    if found_sections:
        parts.append(f"‚úÖ *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:* {', '.join(found_sections)}")
    else:
        parts.append("‚ùå *–†–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*")
    
    # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    missing_sections = structure_results.get("missing_sections", [])
    if missing_sections:
        parts.append(f"‚ö†Ô∏è *–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã:* {', '.join(missing_sections)}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    quality = structure_results.get("structure_quality", "unknown")
    quality_emoji = get_quality_emoji(quality)
    parts.append(f"{quality_emoji} *–ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:* {quality}")
    
    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã
    completeness = structure_results.get("completeness_score", 0)
    if isinstance(completeness, (int, float)):
        parts.append(f"üìä *–ü–æ–ª–Ω–æ—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:* {completeness:.1%}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = structure_results.get("recommendations", [])
    if recommendations:
        parts.append("\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:*")
        for i, rec in enumerate(recommendations[:3], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            parts.append(f"{i}. {rec}")
    
    parts.append("")
    return "\n".join(parts)

def format_summary_analysis(summary_results: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
    if "error" in summary_results:
        return f"‚ùå *–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:* {summary_results['error']}\n"
    
    parts = ["üìö *–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:*"]
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ
    summary_quality = summary_results.get("summary_quality", "unknown")
    quality_emoji = get_quality_emoji(summary_quality)
    parts.append(f"{quality_emoji} *–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ:* {summary_quality}")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
    key_topics = summary_results.get("key_topics", [])
    if key_topics:
        parts.append(f"üîç *–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:* {', '.join(key_topics[:5])}")
    
    # –°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è
    compression_ratio = summary_results.get("compression_ratio", 0)
    if isinstance(compression_ratio, (int, float)):
        parts.append(f"üìè *–°—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è:* {compression_ratio:.1%}")
    
    # –†–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
    summary_text = summary_results.get("summary", "")
    if summary_text and len(summary_text) < 800:
        parts.append(f"\nüìÑ *–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:*\n{summary_text[:600]}...")
    
    parts.append("")
    return "\n".join(parts)

def get_quality_emoji(quality: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    quality_emojis = {
        "excellent": "üåü",
        "good": "‚úÖ", 
        "fair": "‚ö†Ô∏è",
        "poor": "‚ùå",
        "unknown": "‚ùì"
    }
    return quality_emojis.get(quality, "‚ùì")

def format_error_message(error: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    return f"""‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏*

üîç *–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:*
{error}

üí° *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑."""

def format_progress_message(stage: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    stage_messages = {
        "downloading": "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...",
        "extracting": "üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF...",
        "analyzing_structure": "üèó –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç—å–∏...",
        "analyzing_content": "üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...",
        "generating_review": "üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é...",
        "finalizing": "‚úÖ –ó–∞–≤–µ—Ä—à–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
    }
    
    return stage_messages.get(stage, f"üîÑ {stage}...")

def truncate_text(text: str, max_length: int = 4000) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è Telegram
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
    return text[:max_length - 3] + "..."

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram"""
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram MarkdownV2
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text 