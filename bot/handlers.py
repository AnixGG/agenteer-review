import asyncio
import tempfile
import os
import logging
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Document
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.orchestrator import Orchestrator
from core.pdf_extractor import PDFExtractor
from core.agents.structure_agent import StructureAgent
from utils.formatters import format_review, format_progress_message, truncate_text
from .keyboards import (
    get_main_keyboard, get_help_keyboard, get_back_keyboard,
    get_processing_keyboard, get_results_keyboard
)
from .config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProcessingState(StatesGroup):
    waiting_for_file = State()
    processing = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
orchestrator = Orchestrator(config.ORCHESTRATOR_MODEL)
pdf_extractor = PDFExtractor()
structure_agent = StructureAgent()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
orchestrator.register_agent("StructureAgent", structure_agent)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
active_tasks: Dict[int, asyncio.Task] = {}

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π!*

üìã *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
‚Ä¢ –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏

üìÑ *–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª —Å –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–µ–π, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.

üí° *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:* 10 –ú–ë
üïê *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* –æ–±—ã—á–Ω–æ 1-2 –º–∏–Ω—É—Ç—ã
    """
    
    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é")
async def request_file(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"""
    await state.set_state(ProcessingState.waiting_for_file)
    
    await message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª —Å –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:*\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: PDF\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n"
        "‚Ä¢ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
        parse_mode="Markdown"
    )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = """
‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    """
    
    await message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=get_help_keyboard()
    )

@router.message(F.text == "‚öôÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
async def cmd_about(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    about_text = """
‚öôÔ∏è *–û —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è*

üî¨ *–í–µ—Ä—Å–∏—è:* 1.0 (–ë–µ–π–∑–ª–∞–π–Ω)
ü§ñ *–ê–≥–µ–Ω—Ç—ã:* Structure Agent
üß† *–ò–ò –º–æ–¥–µ–ª–∏:* Llama-3.2-3B, SciBERT

üìä *–¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–π

üöÄ *–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–æ–∫
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –Ω–æ–≤–∏–∑–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üë®‚Äçüíª *–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –±–∞–∑–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è*
    """
    
    await message.answer(about_text, parse_mode="Markdown")

@router.callback_query(F.data == "help_usage")
async def help_usage(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    usage_text = """
üìñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É*

1Ô∏è‚É£ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞:*
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç–∞—Ç—å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë
   ‚Ä¢ –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º—ã–º

2Ô∏è‚É£ *–ó–∞–≥—Ä—É–∑–∫–∞:*
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é"
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç

3Ô∏è‚É£ *–û–∂–∏–¥–∞–Ω–∏–µ:*
   ‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ (1-2 –º–∏–Ω—É—Ç—ã)
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏

4Ô∏è‚É£ *–†–µ–∑—É–ª—å—Ç–∞—Ç:*
   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é
   ‚Ä¢ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    """
    
    await callback.message.edit_text(
        usage_text,
        # parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "help_tech")
async def help_tech(callback: CallbackQuery):
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    tech_text = """
üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è*

üìÑ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
   ‚Ä¢ PDF (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
   ‚Ä¢ –ú–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç

üìè *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 2 –º–∏–Ω—É—Ç—ã
   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: –¥–æ 50

üåê *–Ø–∑—ã–∫–∏:*
   ‚Ä¢ –†—É—Å—Å–∫–∏–π ‚úÖ
   ‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚úÖ
   ‚Ä¢ –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ ‚ö†Ô∏è (—á–∞—Å—Ç–∏—á–Ω–æ)

‚ö° *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
   ‚Ä¢ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: 30-120 —Å–µ–∫
   ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 5 —Ñ–∞–π–ª–æ–≤
   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 24/7

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
   ‚Ä¢ –§–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   ‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞
    """
    
    await callback.message.edit_text(
        tech_text,
        # parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "help_faq")
async def help_faq(callback: CallbackQuery):
    """FAQ"""
    faq_text = """
‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

‚ùì *–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è?*
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDF)
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ

‚ùì *–ü–æ—á–µ–º—É –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?*
   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
   ‚Ä¢ –°–µ—Ä–≤–µ—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å

‚ùì *–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?*
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –±–µ–π–∑–ª–∞–π–Ω–∞
   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ~80%
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

‚ùì *–°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–∏ –º–æ–∏ —Ñ–∞–π–ª—ã?*
   ‚Ä¢ –ù–µ—Ç, —Ñ–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   ‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â–µ–Ω–∞

‚ùì *–ú–æ–∂–Ω–æ –ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö?*
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
   ‚Ä¢ –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏: —á–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    """
    
    await callback.message.edit_text(
        faq_text,
        # parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "back_to_help")
async def back_to_help(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    """
    
    await callback.message.edit_text(
        help_text,
        # parse_mode="Markdown",
        reply_markup=get_help_keyboard()
    )

@router.message(F.document, StateFilter(ProcessingState.waiting_for_file))
async def handle_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    document: Document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not pdf_extractor.validate_file_extension(document.file_name):
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n\n"
            "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
            # parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if not pdf_extractor.validate_file_size(document.file_size, config.MAX_FILE_SIZE):
        size_mb = config.MAX_FILE_SIZE / (1024 * 1024)
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n\n"
            f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë\n"
            f"üìé –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {document.file_size / (1024 * 1024):.1f} –ú–ë",
            # parse_mode="Markdown"
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.set_state(ProcessingState.processing)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    task = asyncio.create_task(
        process_document(message, document)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    active_tasks[message.from_user.id] = task
    
    try:
        await task
    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        active_tasks.pop(message.from_user.id, None)
        await state.clear()

async def process_document(message: Message, document: Document):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await message.answer(
            format_progress_message("downloading"),
            reply_markup=get_processing_keyboard()
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.download(document.file_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_msg.edit_text(
            format_progress_message("extracting"),
            reply_markup=get_processing_keyboard()
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text, metadata = await pdf_extractor.extract_from_bytes(file.read())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_msg.edit_text(
            format_progress_message("analyzing_structure"),
            reply_markup=get_processing_keyboard()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata["filename"] = document.file_name
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        results = await orchestrator.process_paper(text, metadata)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_msg.edit_text(
            format_progress_message("finalizing"),
            reply_markup=get_processing_keyboard()
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formatted_review = format_review(results)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        formatted_review = truncate_text(formatted_review)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await progress_msg.edit_text(
            formatted_review,
            # parse_mode="Markdown",
            reply_markup=get_results_keyboard()
        )
        
        logger.info(f"Successfully processed document for user {user_id}")
        
    except asyncio.CancelledError:
        await message.answer(
            "‚èπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
            reply_markup=get_main_keyboard()
        )
        logger.info(f"Processing cancelled by user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing document for user {user_id}: {e}")
        
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n\n{str(e)}"
        
        try:
            await progress_msg.edit_text(
                error_msg,
                reply_markup=get_main_keyboard()
            )
        except:
            await message.answer(
                error_msg,
                reply_markup=get_main_keyboard()
            )

@router.callback_query(F.data == "cancel_processing")
async def cancel_processing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    user_id = callback.from_user.id
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id in active_tasks:
        active_tasks[user_id].cancel()
        active_tasks.pop(user_id, None)
    
    await state.clear()
    
    await callback.message.edit_text(
        "‚èπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "new_paper")
async def new_paper(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏"""
    await state.set_state(ProcessingState.waiting_for_file)
    
    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF —Ñ–∞–π–ª —Å –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:*\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: PDF\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n"
        "‚Ä¢ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
        # parse_mode="Markdown"
    )

@router.callback_query(F.data == "detailed_report")
async def detailed_report(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
    await callback.answer(
        "üöß –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö —Å–∏—Å—Ç–µ–º—ã.",
        show_alert=True
    )

@router.message(StateFilter(ProcessingState.processing))
async def processing_state_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    await message.answer(
        "‚è≥ –í–∞—à —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚èπ –û—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_processing_keyboard()
    )

@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "üìÑ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—å–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.\n"
        "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    ) 